//
// Autogenerated by Thrift Compiler (0.9.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

if (typeof thrift === 'undefined') {
  thrift = {};
}
thrift.PlayState = {
'PREP' : 0,
'PLAY' : 1,
'POSTPLAY' : 2
};
thrift.PlayerRole = {
'QUARTERBACK' : 0,
'HALFBACK' : 1,
'FULLBACK' : 2,
'RECEIVER' : 3,
'OFFENSIVE_TACKLE' : 4,
'DEFENSIVE_TACKLE' : 5
};
thrift.PlayerAbility = {
'FAST_RECOVER' : 0,
'THROW' : 1,
'SPRINT' : 2,
'HURDLE' : 3,
'DIVE' : 4
};
thrift.FieldPoint = function(args) {
  this.x = 0;
  this.y = 0;
  this.z = 0;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
    if (args.z !== undefined) {
      this.z = args.z;
    }
  }
};
thrift.FieldPoint.prototype = {};
thrift.FieldPoint.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.y = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.z = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.FieldPoint.prototype.write = function(output) {
  output.writeStructBegin('FieldPoint');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 1);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.I32, 2);
    output.writeI32(this.y);
    output.writeFieldEnd();
  }
  if (this.z !== null && this.z !== undefined) {
    output.writeFieldBegin('z', Thrift.Type.I32, 3);
    output.writeI32(this.z);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.DynamicValue = function(args) {
  this.current = null;
  this.maximum = null;
  this.multiplier = 1;
  this.modifier = 0;
  if (args) {
    if (args.current !== undefined) {
      this.current = args.current;
    }
    if (args.maximum !== undefined) {
      this.maximum = args.maximum;
    }
    if (args.multiplier !== undefined) {
      this.multiplier = args.multiplier;
    }
    if (args.modifier !== undefined) {
      this.modifier = args.modifier;
    }
  }
};
thrift.DynamicValue.prototype = {};
thrift.DynamicValue.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.current = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.maximum = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.multiplier = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.modifier = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.DynamicValue.prototype.write = function(output) {
  output.writeStructBegin('DynamicValue');
  if (this.current !== null && this.current !== undefined) {
    output.writeFieldBegin('current', Thrift.Type.I32, 1);
    output.writeI32(this.current);
    output.writeFieldEnd();
  }
  if (this.maximum !== null && this.maximum !== undefined) {
    output.writeFieldBegin('maximum', Thrift.Type.I32, 2);
    output.writeI32(this.maximum);
    output.writeFieldEnd();
  }
  if (this.multiplier !== null && this.multiplier !== undefined) {
    output.writeFieldBegin('multiplier', Thrift.Type.I32, 3);
    output.writeI32(this.multiplier);
    output.writeFieldEnd();
  }
  if (this.modifier !== null && this.modifier !== undefined) {
    output.writeFieldBegin('modifier', Thrift.Type.I32, 4);
    output.writeI32(this.modifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Formation = function(args) {
  this.id = null;
  this.locations = {
};
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.locations !== undefined) {
      this.locations = args.locations;
    }
  }
};
thrift.Formation.prototype = {};
thrift.Formation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.locations = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readI32().value;
          var _size8 = 0;
          var _rtmp312;
          val7 = [];
          var _etype11 = 0;
          _rtmp312 = input.readListBegin();
          _etype11 = _rtmp312.etype;
          _size8 = _rtmp312.size;
          for (var _i13 = 0; _i13 < _size8; ++_i13)
          {
            var elem14 = null;
            elem14 = new thrift.FieldPoint();
            elem14.read(input);
            val7.push(elem14);
          }
          input.readListEnd();
          this.locations[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Formation.prototype.write = function(output) {
  output.writeStructBegin('Formation');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.locations !== null && this.locations !== undefined) {
    output.writeFieldBegin('locations', Thrift.Type.MAP, 16);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.LIST, Thrift.objectLength(this.locations));
    for (var kiter15 in this.locations)
    {
      if (this.locations.hasOwnProperty(kiter15))
      {
        var viter16 = this.locations[kiter15];
        output.writeI32(kiter15);
        output.writeListBegin(Thrift.Type.STRUCT, viter16.length);
        for (var iter17 in viter16)
        {
          if (viter16.hasOwnProperty(iter17))
          {
            iter17 = viter16[iter17];
            iter17.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.RouteNode = function(args) {
  this.location = null;
  this.handoff = null;
  this.pitch = null;
  this.waitForBall = false;
  if (args) {
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.handoff !== undefined) {
      this.handoff = args.handoff;
    }
    if (args.pitch !== undefined) {
      this.pitch = args.pitch;
    }
    if (args.waitForBall !== undefined) {
      this.waitForBall = args.waitForBall;
    }
  }
};
thrift.RouteNode.prototype = {};
thrift.RouteNode.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new thrift.FieldPoint();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.handoff = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pitch = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.waitForBall = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.RouteNode.prototype.write = function(output) {
  output.writeStructBegin('RouteNode');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.handoff !== null && this.handoff !== undefined) {
    output.writeFieldBegin('handoff', Thrift.Type.I32, 2);
    output.writeI32(this.handoff);
    output.writeFieldEnd();
  }
  if (this.pitch !== null && this.pitch !== undefined) {
    output.writeFieldBegin('pitch', Thrift.Type.I32, 3);
    output.writeI32(this.pitch);
    output.writeFieldEnd();
  }
  if (this.waitForBall !== null && this.waitForBall !== undefined) {
    output.writeFieldBegin('waitForBall', Thrift.Type.BOOL, 4);
    output.writeBool(this.waitForBall);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.PlayerRoute = function(args) {
  this.id = null;
  this.nodes = [];
  this.keepRunning = true;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.nodes !== undefined) {
      this.nodes = args.nodes;
    }
    if (args.keepRunning !== undefined) {
      this.keepRunning = args.keepRunning;
    }
  }
};
thrift.PlayerRoute.prototype = {};
thrift.PlayerRoute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.nodes = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new thrift.RouteNode();
          elem24.read(input);
          this.nodes.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.keepRunning = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.PlayerRoute.prototype.write = function(output) {
  output.writeStructBegin('PlayerRoute');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.nodes !== null && this.nodes !== undefined) {
    output.writeFieldBegin('nodes', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodes.length);
    for (var iter25 in this.nodes)
    {
      if (this.nodes.hasOwnProperty(iter25))
      {
        iter25 = this.nodes[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.keepRunning !== null && this.keepRunning !== undefined) {
    output.writeFieldBegin('keepRunning', Thrift.Type.BOOL, 17);
    output.writeBool(this.keepRunning);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.OffensivePlay = function(args) {
  this.id = null;
  this.formationId = null;
  this.routes = {
};
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.formationId !== undefined) {
      this.formationId = args.formationId;
    }
    if (args.routes !== undefined) {
      this.routes = args.routes;
    }
  }
};
thrift.OffensivePlay.prototype = {};
thrift.OffensivePlay.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.formationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.MAP) {
        var _size26 = 0;
        var _rtmp330;
        this.routes = {};
        var _ktype27 = 0;
        var _vtype28 = 0;
        _rtmp330 = input.readMapBegin();
        _ktype27 = _rtmp330.ktype;
        _vtype28 = _rtmp330.vtype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          if (_i31 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key32 = null;
          var val33 = null;
          key32 = input.readI32().value;
          var _size34 = 0;
          var _rtmp338;
          val33 = [];
          var _etype37 = 0;
          _rtmp338 = input.readListBegin();
          _etype37 = _rtmp338.etype;
          _size34 = _rtmp338.size;
          for (var _i39 = 0; _i39 < _size34; ++_i39)
          {
            var elem40 = null;
            elem40 = new thrift.PlayerRoute();
            elem40.read(input);
            val33.push(elem40);
          }
          input.readListEnd();
          this.routes[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.OffensivePlay.prototype.write = function(output) {
  output.writeStructBegin('OffensivePlay');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.formationId !== null && this.formationId !== undefined) {
    output.writeFieldBegin('formationId', Thrift.Type.STRING, 16);
    output.writeString(this.formationId);
    output.writeFieldEnd();
  }
  if (this.routes !== null && this.routes !== undefined) {
    output.writeFieldBegin('routes', Thrift.Type.MAP, 17);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.LIST, Thrift.objectLength(this.routes));
    for (var kiter41 in this.routes)
    {
      if (this.routes.hasOwnProperty(kiter41))
      {
        var viter42 = this.routes[kiter41];
        output.writeI32(kiter41);
        output.writeListBegin(Thrift.Type.STRUCT, viter42.length);
        for (var iter43 in viter42)
        {
          if (viter42.hasOwnProperty(iter43))
          {
            iter43 = viter42[iter43];
            iter43.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Player = function(args) {
  this.id = null;
  this.location = null;
  this.hasBall = null;
  this.teamId = null;
  this.passTargetIndex = -1;
  this.role = null;
  this.tackleTarget = null;
  this.abilitiesUsed = [];
  this.wrestleTargetId = null;
  this.routeId = null;
  this.routeNodeIndex = null;
  this.stamina = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.hasBall !== undefined) {
      this.hasBall = args.hasBall;
    }
    if (args.teamId !== undefined) {
      this.teamId = args.teamId;
    }
    if (args.passTargetIndex !== undefined) {
      this.passTargetIndex = args.passTargetIndex;
    }
    if (args.role !== undefined) {
      this.role = args.role;
    }
    if (args.tackleTarget !== undefined) {
      this.tackleTarget = args.tackleTarget;
    }
    if (args.abilitiesUsed !== undefined) {
      this.abilitiesUsed = args.abilitiesUsed;
    }
    if (args.wrestleTargetId !== undefined) {
      this.wrestleTargetId = args.wrestleTargetId;
    }
    if (args.routeId !== undefined) {
      this.routeId = args.routeId;
    }
    if (args.routeNodeIndex !== undefined) {
      this.routeNodeIndex = args.routeNodeIndex;
    }
    if (args.stamina !== undefined) {
      this.stamina = args.stamina;
    }
  }
};
thrift.Player.prototype = {};
thrift.Player.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new thrift.FieldPoint();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.BOOL) {
        this.hasBall = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.teamId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.passTargetIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.role = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.tackleTarget = new thrift.FieldPoint();
        this.tackleTarget.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.SET) {
        var _size44 = 0;
        var _rtmp348;
        this.abilitiesUsed = [];
        var _etype47 = 0;
        _rtmp348 = input.readSetBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = input.readI32().value;
          this.abilitiesUsed.push(elem50);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.wrestleTargetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.routeId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.routeNodeIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.stamina = new thrift.DynamicValue();
        this.stamina.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Player.prototype.write = function(output) {
  output.writeStructBegin('Player');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 16);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.hasBall !== null && this.hasBall !== undefined) {
    output.writeFieldBegin('hasBall', Thrift.Type.BOOL, 17);
    output.writeBool(this.hasBall);
    output.writeFieldEnd();
  }
  if (this.teamId !== null && this.teamId !== undefined) {
    output.writeFieldBegin('teamId', Thrift.Type.STRING, 18);
    output.writeString(this.teamId);
    output.writeFieldEnd();
  }
  if (this.passTargetIndex !== null && this.passTargetIndex !== undefined) {
    output.writeFieldBegin('passTargetIndex', Thrift.Type.I32, 19);
    output.writeI32(this.passTargetIndex);
    output.writeFieldEnd();
  }
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.I32, 20);
    output.writeI32(this.role);
    output.writeFieldEnd();
  }
  if (this.tackleTarget !== null && this.tackleTarget !== undefined) {
    output.writeFieldBegin('tackleTarget', Thrift.Type.STRUCT, 21);
    this.tackleTarget.write(output);
    output.writeFieldEnd();
  }
  if (this.abilitiesUsed !== null && this.abilitiesUsed !== undefined) {
    output.writeFieldBegin('abilitiesUsed', Thrift.Type.SET, 22);
    output.writeSetBegin(Thrift.Type.I32, this.abilitiesUsed.length);
    for (var iter51 in this.abilitiesUsed)
    {
      if (this.abilitiesUsed.hasOwnProperty(iter51))
      {
        iter51 = this.abilitiesUsed[iter51];
        output.writeI32(iter51);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.wrestleTargetId !== null && this.wrestleTargetId !== undefined) {
    output.writeFieldBegin('wrestleTargetId', Thrift.Type.STRING, 23);
    output.writeString(this.wrestleTargetId);
    output.writeFieldEnd();
  }
  if (this.routeId !== null && this.routeId !== undefined) {
    output.writeFieldBegin('routeId', Thrift.Type.STRING, 24);
    output.writeString(this.routeId);
    output.writeFieldEnd();
  }
  if (this.routeNodeIndex !== null && this.routeNodeIndex !== undefined) {
    output.writeFieldBegin('routeNodeIndex', Thrift.Type.I32, 25);
    output.writeI32(this.routeNodeIndex);
    output.writeFieldEnd();
  }
  if (this.stamina !== null && this.stamina !== undefined) {
    output.writeFieldBegin('stamina', Thrift.Type.STRUCT, 26);
    this.stamina.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Ball = function(args) {
  this.location = null;
  this.ownedPlayerId = null;
  this.passSource = null;
  this.passTarget = null;
  this.ticksToTarget = null;
  this.ticksInFlight = null;
  if (args) {
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.ownedPlayerId !== undefined) {
      this.ownedPlayerId = args.ownedPlayerId;
    }
    if (args.passSource !== undefined) {
      this.passSource = args.passSource;
    }
    if (args.passTarget !== undefined) {
      this.passTarget = args.passTarget;
    }
    if (args.ticksToTarget !== undefined) {
      this.ticksToTarget = args.ticksToTarget;
    }
    if (args.ticksInFlight !== undefined) {
      this.ticksInFlight = args.ticksInFlight;
    }
  }
};
thrift.Ball.prototype = {};
thrift.Ball.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.location = new thrift.FieldPoint();
        this.location.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ownedPlayerId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.passSource = new thrift.FieldPoint();
        this.passSource.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.passTarget = new thrift.FieldPoint();
        this.passTarget.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.ticksToTarget = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.ticksInFlight = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Ball.prototype.write = function(output) {
  output.writeStructBegin('Ball');
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRUCT, 1);
    this.location.write(output);
    output.writeFieldEnd();
  }
  if (this.ownedPlayerId !== null && this.ownedPlayerId !== undefined) {
    output.writeFieldBegin('ownedPlayerId', Thrift.Type.STRING, 2);
    output.writeString(this.ownedPlayerId);
    output.writeFieldEnd();
  }
  if (this.passSource !== null && this.passSource !== undefined) {
    output.writeFieldBegin('passSource', Thrift.Type.STRUCT, 3);
    this.passSource.write(output);
    output.writeFieldEnd();
  }
  if (this.passTarget !== null && this.passTarget !== undefined) {
    output.writeFieldBegin('passTarget', Thrift.Type.STRUCT, 4);
    this.passTarget.write(output);
    output.writeFieldEnd();
  }
  if (this.ticksToTarget !== null && this.ticksToTarget !== undefined) {
    output.writeFieldBegin('ticksToTarget', Thrift.Type.I32, 5);
    output.writeI32(this.ticksToTarget);
    output.writeFieldEnd();
  }
  if (this.ticksInFlight !== null && this.ticksInFlight !== undefined) {
    output.writeFieldBegin('ticksInFlight', Thrift.Type.I32, 6);
    output.writeI32(this.ticksInFlight);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Team = function(args) {
  this.id = null;
  this.playerIds = [];
  this.score = null;
  this.offenseGoesRight = null;
  this.onOffense = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.playerIds !== undefined) {
      this.playerIds = args.playerIds;
    }
    if (args.score !== undefined) {
      this.score = args.score;
    }
    if (args.offenseGoesRight !== undefined) {
      this.offenseGoesRight = args.offenseGoesRight;
    }
    if (args.onOffense !== undefined) {
      this.onOffense = args.onOffense;
    }
  }
};
thrift.Team.prototype = {};
thrift.Team.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.playerIds = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = input.readString().value;
          this.playerIds.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.score = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.offenseGoesRight = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.onOffense = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Team.prototype.write = function(output) {
  output.writeStructBegin('Team');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.playerIds !== null && this.playerIds !== undefined) {
    output.writeFieldBegin('playerIds', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRING, this.playerIds.length);
    for (var iter59 in this.playerIds)
    {
      if (this.playerIds.hasOwnProperty(iter59))
      {
        iter59 = this.playerIds[iter59];
        output.writeString(iter59);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.I32, 17);
    output.writeI32(this.score);
    output.writeFieldEnd();
  }
  if (this.offenseGoesRight !== null && this.offenseGoesRight !== undefined) {
    output.writeFieldBegin('offenseGoesRight', Thrift.Type.BOOL, 18);
    output.writeBool(this.offenseGoesRight);
    output.writeFieldEnd();
  }
  if (this.onOffense !== null && this.onOffense !== undefined) {
    output.writeFieldBegin('onOffense', Thrift.Type.BOOL, 19);
    output.writeBool(this.onOffense);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

thrift.Game = function(args) {
  this.id = null;
  this.teams = [];
  this.ball = null;
  this.scrimmageLine = null;
  this.firstDownLine = null;
  this.down = null;
  this.offensivePlay = null;
  this.playState = null;
  this.ticksLeftInQuarter = null;
  this.quarter = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.teams !== undefined) {
      this.teams = args.teams;
    }
    if (args.ball !== undefined) {
      this.ball = args.ball;
    }
    if (args.scrimmageLine !== undefined) {
      this.scrimmageLine = args.scrimmageLine;
    }
    if (args.firstDownLine !== undefined) {
      this.firstDownLine = args.firstDownLine;
    }
    if (args.down !== undefined) {
      this.down = args.down;
    }
    if (args.offensivePlay !== undefined) {
      this.offensivePlay = args.offensivePlay;
    }
    if (args.playState !== undefined) {
      this.playState = args.playState;
    }
    if (args.ticksLeftInQuarter !== undefined) {
      this.ticksLeftInQuarter = args.ticksLeftInQuarter;
    }
    if (args.quarter !== undefined) {
      this.quarter = args.quarter;
    }
  }
};
thrift.Game.prototype = {};
thrift.Game.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.teams = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = input.readString().value;
          this.teams.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.ball = new thrift.Ball();
        this.ball.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.scrimmageLine = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.firstDownLine = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.down = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.offensivePlay = new thrift.OffensivePlay();
        this.offensivePlay.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.playState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.ticksLeftInQuarter = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.quarter = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

thrift.Game.prototype.write = function(output) {
  output.writeStructBegin('Game');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.teams !== null && this.teams !== undefined) {
    output.writeFieldBegin('teams', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRING, this.teams.length);
    for (var iter67 in this.teams)
    {
      if (this.teams.hasOwnProperty(iter67))
      {
        iter67 = this.teams[iter67];
        output.writeString(iter67);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ball !== null && this.ball !== undefined) {
    output.writeFieldBegin('ball', Thrift.Type.STRUCT, 17);
    this.ball.write(output);
    output.writeFieldEnd();
  }
  if (this.scrimmageLine !== null && this.scrimmageLine !== undefined) {
    output.writeFieldBegin('scrimmageLine', Thrift.Type.I32, 18);
    output.writeI32(this.scrimmageLine);
    output.writeFieldEnd();
  }
  if (this.firstDownLine !== null && this.firstDownLine !== undefined) {
    output.writeFieldBegin('firstDownLine', Thrift.Type.I32, 19);
    output.writeI32(this.firstDownLine);
    output.writeFieldEnd();
  }
  if (this.down !== null && this.down !== undefined) {
    output.writeFieldBegin('down', Thrift.Type.I32, 20);
    output.writeI32(this.down);
    output.writeFieldEnd();
  }
  if (this.offensivePlay !== null && this.offensivePlay !== undefined) {
    output.writeFieldBegin('offensivePlay', Thrift.Type.STRUCT, 21);
    this.offensivePlay.write(output);
    output.writeFieldEnd();
  }
  if (this.playState !== null && this.playState !== undefined) {
    output.writeFieldBegin('playState', Thrift.Type.I32, 22);
    output.writeI32(this.playState);
    output.writeFieldEnd();
  }
  if (this.ticksLeftInQuarter !== null && this.ticksLeftInQuarter !== undefined) {
    output.writeFieldBegin('ticksLeftInQuarter', Thrift.Type.I32, 23);
    output.writeI32(this.ticksLeftInQuarter);
    output.writeFieldEnd();
  }
  if (this.quarter !== null && this.quarter !== undefined) {
    output.writeFieldBegin('quarter', Thrift.Type.I32, 24);
    output.writeI32(this.quarter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

